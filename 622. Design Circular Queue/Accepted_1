class MyCircularQueue:
    # 원형큐는 FIFO 선입선출
    # 마지막이 처음과 이어진다.

    def __init__(self, k: int):
        '''
        원형 큐의 크기를 k로 초기화 한다.
        '''
        self.q = collections.deque(maxlen=k)
        self.size = k
        

    def enQueue(self, value: int) -> bool:
        '''
        원형 큐에 value를 넣고, 성공하면 True 리턴
        '''
        if self.isFull():
            return False
        self.q.append(value)
        return True
        

    def deQueue(self) -> bool:
        '''
        원형큐에서 하나 삭제, 성공하면 True 리턴
        '''
        if self.isEmpty():
            return False
        self.q.popleft()
        return True
        

    def Front(self) -> int:
        '''
        맨 앞의 요소 리턴, 없으면 -1
        '''
        if self.isEmpty():
            return -1
        return self.q[0]
        

    def Rear(self) -> int:
        '''
        맨 뒤의 요소 리턴, 없으면 -1
        '''
        if self.isEmpty():
            return -1
        return self.q[-1]
        

    def isEmpty(self) -> bool:
        '''
        원형큐가 텅텅이면 True
        '''
        return len(self.q) == 0
        

    def isFull(self) -> bool:
        '''
        원형큐에 빈 자리가 없으면 True
        '''
        print(self.q)
        return len(self.q) == self.size
        


# Your MyCircularQueue object will be instantiated and called as such:
# obj = MyCircularQueue(k)
# param_1 = obj.enQueue(value)
# param_2 = obj.deQueue()
# param_3 = obj.Front()
# param_4 = obj.Rear()
# param_5 = obj.isEmpty()
# param_6 = obj.isFull()
